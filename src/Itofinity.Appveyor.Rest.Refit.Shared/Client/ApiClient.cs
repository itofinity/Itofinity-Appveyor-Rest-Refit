/* 
 * AppVeyor REST API
 *
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * OpenAPI spec version: 0.20170106.0
 * Contact: team@appveyor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.IO;
using System.Web;
using System.Linq;
using System.Net;
using System.Text;
using Newtonsoft.Json;
using Refit;
using Itofinity.Appveyor.Rest.Refit.Api;

namespace Itofinity.Appveyor.Rest.Refit.Client
{
    /// <summary>
    /// API client is mainly responsible for making the HTTP call to the API backend.
    /// </summary>
    public partial class ApiClient
    {
        public ApiClient(HttpClient client)
        {
            BuildApiClient = RestService.For<IBuildApi>(client);

            CollaboratorApiClient = RestService.For<ICollaboratorApi>(client);

            DeploymentApiClient = RestService.For<IDeploymentApi>(client);

            EnvironmentApiClient = RestService.For<IEnvironmentApi>(client);

            ProjectApiClient = RestService.For<IProjectApi>(client);

            RoleApiClient = RestService.For<IRoleApi>(client);

            UserApiClient = RestService.For<IUserApi>(client);

        }

        /// <param name="getSchemeAndToken"></param>
        public ApiClient(string url, Func<Task<Tuple<string, string>>> getSchemeAndToken) : this(new HttpClient(new AuthenticatedHttpClientHandler(getSchemeAndToken))
            {
            BaseAddress = new Uri(url)
            })
        {
        }

        /// <inheritdoc />
        public IBuildApi BuildApiClient { get; }

        /// <inheritdoc />
        public ICollaboratorApi CollaboratorApiClient { get; }

        /// <inheritdoc />
        public IDeploymentApi DeploymentApiClient { get; }

        /// <inheritdoc />
        public IEnvironmentApi EnvironmentApiClient { get; }

        /// <inheritdoc />
        public IProjectApi ProjectApiClient { get; }

        /// <inheritdoc />
        public IRoleApi RoleApiClient { get; }

        /// <inheritdoc />
        public IUserApi UserApiClient { get; }


        public string Scheme { get; }

        public string Token { get; }

        private async Task<Tuple<string, string>> GetSchemeAndToken()
        {
            return new Tuple<string, string>(Scheme, Token);
        }
    }

    public class AuthenticatedHttpClientHandler : HttpClientHandler
    {
        private readonly Func<Task<Tuple<string, string>>> getSchemeAndToken;

        public AuthenticatedHttpClientHandler(Func<Task<Tuple<string, string>>> getSchemeAndToken)
        {
            this.getSchemeAndToken = getSchemeAndToken;
        }

        protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request,
            CancellationToken cancellationToken)
        {
            // See if the request has an authorize header
            var auth = request.Headers.Authorization;
            var schemeAndToken = await getSchemeAndToken().ConfigureAwait(false);

            if (schemeAndToken != null)
            {
            request.Headers.Authorization = new AuthenticationHeaderValue(schemeAndToken.Item1, schemeAndToken.Item2);
            }


            return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);
        }
    }
}
