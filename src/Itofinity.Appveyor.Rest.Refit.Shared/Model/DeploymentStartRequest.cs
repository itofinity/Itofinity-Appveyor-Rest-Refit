/* 
 * AppVeyor REST API
 *
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * OpenAPI spec version: 0.20170106.0
 * Contact: team@appveyor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Itofinity.Appveyor.Rest.Refit.Model
{
    /// <summary>
    /// DeploymentStartRequest
    /// </summary>
    [DataContract]
    public partial class DeploymentStartRequest :  IEquatable<DeploymentStartRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentStartRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeploymentStartRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentStartRequest" /> class.
        /// </summary>
        /// <param name="EnvironmentName">EnvironmentName (required).</param>
        /// <param name="AccountName">AccountName (required).</param>
        /// <param name="ProjectSlug">ProjectSlug (required).</param>
        /// <param name="BuildVersion">Build to deploy (required).</param>
        /// <param name="BuildJobId">Optional job id with artifacts if build contains multiple jobs..</param>
        /// <param name="EnvironmentVariables">EnvironmentVariables.</param>
        public DeploymentStartRequest(string EnvironmentName = default(string), string AccountName = default(string), string ProjectSlug = default(string), string BuildVersion = default(string), string BuildJobId = default(string), Dictionary<string, string> EnvironmentVariables = default(Dictionary<string, string>))
        {
            // to ensure "EnvironmentName" is required (not null)
            if (EnvironmentName == null)
            {
                throw new InvalidDataException("EnvironmentName is a required property for DeploymentStartRequest and cannot be null");
            }
            else
            {
                this.EnvironmentName = EnvironmentName;
            }
            // to ensure "AccountName" is required (not null)
            if (AccountName == null)
            {
                throw new InvalidDataException("AccountName is a required property for DeploymentStartRequest and cannot be null");
            }
            else
            {
                this.AccountName = AccountName;
            }
            // to ensure "ProjectSlug" is required (not null)
            if (ProjectSlug == null)
            {
                throw new InvalidDataException("ProjectSlug is a required property for DeploymentStartRequest and cannot be null");
            }
            else
            {
                this.ProjectSlug = ProjectSlug;
            }
            // to ensure "BuildVersion" is required (not null)
            if (BuildVersion == null)
            {
                throw new InvalidDataException("BuildVersion is a required property for DeploymentStartRequest and cannot be null");
            }
            else
            {
                this.BuildVersion = BuildVersion;
            }
            this.BuildJobId = BuildJobId;
            this.EnvironmentVariables = EnvironmentVariables;
        }
        
        /// <summary>
        /// Gets or Sets EnvironmentName
        /// </summary>
        [DataMember(Name="environmentName", EmitDefaultValue=false)]
        public string EnvironmentName { get; set; }
        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }
        /// <summary>
        /// Gets or Sets ProjectSlug
        /// </summary>
        [DataMember(Name="projectSlug", EmitDefaultValue=false)]
        public string ProjectSlug { get; set; }
        /// <summary>
        /// Build to deploy
        /// </summary>
        /// <value>Build to deploy</value>
        [DataMember(Name="buildVersion", EmitDefaultValue=false)]
        public string BuildVersion { get; set; }
        /// <summary>
        /// Optional job id with artifacts if build contains multiple jobs.
        /// </summary>
        /// <value>Optional job id with artifacts if build contains multiple jobs.</value>
        [DataMember(Name="buildJobId", EmitDefaultValue=false)]
        public string BuildJobId { get; set; }
        /// <summary>
        /// Gets or Sets EnvironmentVariables
        /// </summary>
        [DataMember(Name="environmentVariables", EmitDefaultValue=false)]
        public Dictionary<string, string> EnvironmentVariables { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeploymentStartRequest {\n");
            sb.Append("  EnvironmentName: ").Append(EnvironmentName).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  ProjectSlug: ").Append(ProjectSlug).Append("\n");
            sb.Append("  BuildVersion: ").Append(BuildVersion).Append("\n");
            sb.Append("  BuildJobId: ").Append(BuildJobId).Append("\n");
            sb.Append("  EnvironmentVariables: ").Append(EnvironmentVariables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeploymentStartRequest);
        }

        /// <summary>
        /// Returns true if DeploymentStartRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of DeploymentStartRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeploymentStartRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EnvironmentName == other.EnvironmentName ||
                    this.EnvironmentName != null &&
                    this.EnvironmentName.Equals(other.EnvironmentName)
                ) && 
                (
                    this.AccountName == other.AccountName ||
                    this.AccountName != null &&
                    this.AccountName.Equals(other.AccountName)
                ) && 
                (
                    this.ProjectSlug == other.ProjectSlug ||
                    this.ProjectSlug != null &&
                    this.ProjectSlug.Equals(other.ProjectSlug)
                ) && 
                (
                    this.BuildVersion == other.BuildVersion ||
                    this.BuildVersion != null &&
                    this.BuildVersion.Equals(other.BuildVersion)
                ) && 
                (
                    this.BuildJobId == other.BuildJobId ||
                    this.BuildJobId != null &&
                    this.BuildJobId.Equals(other.BuildJobId)
                ) && 
                (
                    this.EnvironmentVariables == other.EnvironmentVariables ||
                    this.EnvironmentVariables != null &&
                    this.EnvironmentVariables.SequenceEqual(other.EnvironmentVariables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EnvironmentName != null)
                    hash = hash * 59 + this.EnvironmentName.GetHashCode();
                if (this.AccountName != null)
                    hash = hash * 59 + this.AccountName.GetHashCode();
                if (this.ProjectSlug != null)
                    hash = hash * 59 + this.ProjectSlug.GetHashCode();
                if (this.BuildVersion != null)
                    hash = hash * 59 + this.BuildVersion.GetHashCode();
                if (this.BuildJobId != null)
                    hash = hash * 59 + this.BuildJobId.GetHashCode();
                if (this.EnvironmentVariables != null)
                    hash = hash * 59 + this.EnvironmentVariables.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EnvironmentName (string) minLength
            if(this.EnvironmentName != null && this.EnvironmentName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnvironmentName, length must be greater than 1.", new [] { "EnvironmentName" });
            }

            // AccountName (string) minLength
            if(this.AccountName != null && this.AccountName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountName, length must be greater than 1.", new [] { "AccountName" });
            }

            // ProjectSlug (string) minLength
            if(this.ProjectSlug != null && this.ProjectSlug.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProjectSlug, length must be greater than 1.", new [] { "ProjectSlug" });
            }

            // BuildVersion (string) minLength
            if(this.BuildVersion != null && this.BuildVersion.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BuildVersion, length must be greater than 1.", new [] { "BuildVersion" });
            }

            yield break;
        }
    }

}
