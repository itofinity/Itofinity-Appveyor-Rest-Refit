/* 
 * AppVeyor REST API
 *
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * OpenAPI spec version: 0.20170106.0
 * Contact: team@appveyor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Itofinity.Appveyor.Rest.Refit.Model
{
    /// <summary>
    /// UserAddition
    /// </summary>
    [DataContract]
    public partial class UserAddition :  IEquatable<UserAddition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAddition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserAddition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAddition" /> class.
        /// </summary>
        /// <param name="FullName">FullName (required).</param>
        /// <param name="Email">Email (required).</param>
        /// <param name="RoleId">Technically &#x60;roleId&#x60; has default value 0 and is not required, but since role 0 never exists it would always cause a 404 response.  (required).</param>
        /// <param name="GeneratePassword">GeneratePassword.</param>
        /// <param name="Password">Password.</param>
        /// <param name="ConfirmPassword">ConfirmPassword.</param>
        public UserAddition(string FullName = default(string), string Email = default(string), int? RoleId = default(int?), bool? GeneratePassword = default(bool?), string Password = default(string), string ConfirmPassword = default(string))
        {
            // to ensure "FullName" is required (not null)
            if (FullName == null)
            {
                throw new InvalidDataException("FullName is a required property for UserAddition and cannot be null");
            }
            else
            {
                this.FullName = FullName;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for UserAddition and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "RoleId" is required (not null)
            if (RoleId == null)
            {
                throw new InvalidDataException("RoleId is a required property for UserAddition and cannot be null");
            }
            else
            {
                this.RoleId = RoleId;
            }
            this.GeneratePassword = GeneratePassword;
            this.Password = Password;
            this.ConfirmPassword = ConfirmPassword;
        }
        
        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Technically &#x60;roleId&#x60; has default value 0 and is not required, but since role 0 never exists it would always cause a 404 response. 
        /// </summary>
        /// <value>Technically &#x60;roleId&#x60; has default value 0 and is not required, but since role 0 never exists it would always cause a 404 response. </value>
        [DataMember(Name="roleId", EmitDefaultValue=false)]
        public int? RoleId { get; set; }
        /// <summary>
        /// Gets or Sets GeneratePassword
        /// </summary>
        [DataMember(Name="generatePassword", EmitDefaultValue=false)]
        public bool? GeneratePassword { get; set; }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// Gets or Sets ConfirmPassword
        /// </summary>
        [DataMember(Name="confirmPassword", EmitDefaultValue=false)]
        public string ConfirmPassword { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAddition {\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  GeneratePassword: ").Append(GeneratePassword).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ConfirmPassword: ").Append(ConfirmPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserAddition);
        }

        /// <summary>
        /// Returns true if UserAddition instances are equal
        /// </summary>
        /// <param name="other">Instance of UserAddition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAddition other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FullName == other.FullName ||
                    this.FullName != null &&
                    this.FullName.Equals(other.FullName)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.RoleId == other.RoleId ||
                    this.RoleId != null &&
                    this.RoleId.Equals(other.RoleId)
                ) && 
                (
                    this.GeneratePassword == other.GeneratePassword ||
                    this.GeneratePassword != null &&
                    this.GeneratePassword.Equals(other.GeneratePassword)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.ConfirmPassword == other.ConfirmPassword ||
                    this.ConfirmPassword != null &&
                    this.ConfirmPassword.Equals(other.ConfirmPassword)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FullName != null)
                    hash = hash * 59 + this.FullName.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.RoleId != null)
                    hash = hash * 59 + this.RoleId.GetHashCode();
                if (this.GeneratePassword != null)
                    hash = hash * 59 + this.GeneratePassword.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.ConfirmPassword != null)
                    hash = hash * 59 + this.ConfirmPassword.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RoleId (int?) minimum
            if(this.RoleId < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RoleId, must be a value greater than or equal to 0.", new [] { "RoleId" });
            }

            // Password (string) minLength
            if(this.Password != null && this.Password.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be greater than 1.", new [] { "Password" });
            }

            // ConfirmPassword (string) minLength
            if(this.ConfirmPassword != null && this.ConfirmPassword.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConfirmPassword, length must be greater than 1.", new [] { "ConfirmPassword" });
            }

            yield break;
        }
    }

}
