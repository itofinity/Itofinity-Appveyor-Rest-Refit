/* 
 * AppVeyor REST API
 *
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * OpenAPI spec version: 0.20170106.0
 * Contact: team@appveyor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Itofinity.Appveyor.Rest.Refit.Model
{
    /// <summary>
    /// ProjectConfiguration
    /// </summary>
    [DataContract]
    public partial class ProjectConfiguration :  IEquatable<ProjectConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets TestCategoriesMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TestCategoriesModeEnum
        {
            
            /// <summary>
            /// Enum Exclude for "exclude"
            /// </summary>
            [EnumMember(Value = "exclude")]
            Exclude,
            
            /// <summary>
            /// Enum Include for "include"
            /// </summary>
            [EnumMember(Value = "include")]
            Include
        }

        /// <summary>
        /// Gets or Sets TestCategoriesMode
        /// </summary>
        [DataMember(Name="testCategoriesMode", EmitDefaultValue=false)]
        public TestCategoriesModeEnum? TestCategoriesMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectConfiguration" /> class.
        /// </summary>
        /// <param name="DoNotIncrementBuildNumberOnPullRequests">DoNotIncrementBuildNumberOnPullRequests.</param>
        /// <param name="HotFixScripts">HotFixScripts.</param>
        /// <param name="InitScripts">InitScripts.</param>
        /// <param name="BranchesMode">BranchesMode.</param>
        /// <param name="IncludeBranches">IncludeBranches.</param>
        /// <param name="ExcludeBranches">ExcludeBranches.</param>
        /// <param name="SkipTags">SkipTags.</param>
        /// <param name="SkipNonTags">SkipNonTags.</param>
        /// <param name="SkipBranchWithPullRequests">SkipBranchWithPullRequests.</param>
        /// <param name="SkipCommitsFiles">SkipCommitsFiles.</param>
        /// <param name="OnlyCommitsFiles">OnlyCommitsFiles.</param>
        /// <param name="CloneScripts">CloneScripts.</param>
        /// <param name="OnBuildSuccessScripts">OnBuildSuccessScripts.</param>
        /// <param name="OnBuildErrorScripts">OnBuildErrorScripts.</param>
        /// <param name="OnBuildFinishScripts">OnBuildFinishScripts.</param>
        /// <param name="PatchAssemblyInfo">PatchAssemblyInfo.</param>
        /// <param name="AssemblyInfoFile">AssemblyInfoFile.</param>
        /// <param name="AssemblyVersionFormat">AssemblyVersionFormat.</param>
        /// <param name="AssemblyFileVersionFormat">AssemblyFileVersionFormat.</param>
        /// <param name="AssemblyInformationalVersionFormat">AssemblyInformationalVersionFormat.</param>
        /// <param name="PatchDotnetCsproj">PatchDotnetCsproj.</param>
        /// <param name="DotnetCsprojFile">DotnetCsprojFile.</param>
        /// <param name="DotnetCsprojVersionFormat">DotnetCsprojVersionFormat.</param>
        /// <param name="DotnetCsprojPackageVersionFormat">DotnetCsprojPackageVersionFormat.</param>
        /// <param name="MaxJobs">MaxJobs.</param>
        /// <param name="BuildCloud">BuildCloud.</param>
        /// <param name="OperatingSystem">OperatingSystem.</param>
        /// <param name="Services">Services.</param>
        /// <param name="CloneFolder">CloneFolder.</param>
        /// <param name="ShallowClone">ShallowClone.</param>
        /// <param name="ForceHttpsClone">ForceHttpsClone.</param>
        /// <param name="CloneDepth">CloneDepth.</param>
        /// <param name="EnvironmentVariables">EnvironmentVariables.</param>
        /// <param name="EnvironmentVariablesMatrix">EnvironmentVariablesMatrix.</param>
        /// <param name="InstallScripts">InstallScripts.</param>
        /// <param name="HostsEntries">HostsEntries.</param>
        /// <param name="CacheEntries">CacheEntries.</param>
        /// <param name="ConfigureNuGetProjectSource">ConfigureNuGetProjectSource.</param>
        /// <param name="ConfigureNuGetAccountSource">ConfigureNuGetAccountSource.</param>
        /// <param name="DisableNuGetPublishOnPullRequests">DisableNuGetPublishOnPullRequests.</param>
        /// <param name="BuildMode">BuildMode.</param>
        /// <param name="Platform">Platform.</param>
        /// <param name="Configuration">Configuration.</param>
        /// <param name="MsBuildProjectFileName">MsBuildProjectFileName.</param>
        /// <param name="PackageWebApplicationProjects">PackageWebApplicationProjects.</param>
        /// <param name="PackageWebApplicationProjectsXCopy">PackageWebApplicationProjectsXCopy.</param>
        /// <param name="PackageAzureCloudServiceProjects">PackageAzureCloudServiceProjects.</param>
        /// <param name="PackageNuGetProjects">PackageNuGetProjects.</param>
        /// <param name="PackageNuGetSymbols">PackageNuGetSymbols.</param>
        /// <param name="IncludeNuGetReferences">IncludeNuGetReferences.</param>
        /// <param name="MsBuildInParallel">MsBuildInParallel.</param>
        /// <param name="MsBuildVerbosity">MsBuildVerbosity.</param>
        /// <param name="BuildScripts">Only set/used when &#x60;buildMode&#x60; is &#x60;script&#x60;..</param>
        /// <param name="BeforeBuildScripts">BeforeBuildScripts.</param>
        /// <param name="BeforePackageScripts">BeforePackageScripts.</param>
        /// <param name="AfterBuildScripts">AfterBuildScripts.</param>
        /// <param name="TestMode">TestMode.</param>
        /// <param name="TestAssemblies">TestAssemblies.</param>
        /// <param name="TestCategoriesMode">TestCategoriesMode.</param>
        /// <param name="TestCategories">TestCategories.</param>
        /// <param name="TestCategoriesMatrix">TestCategoriesMatrix.</param>
        /// <param name="TestScripts">Only set/used when &#x60;testMode&#x60; is &#x60;script&#x60;..</param>
        /// <param name="BeforeTestScripts">BeforeTestScripts.</param>
        /// <param name="AfterTestScripts">AfterTestScripts.</param>
        /// <param name="DeployMode">DeployMode.</param>
        /// <param name="Deployments">Deployments.</param>
        /// <param name="DeployScripts">DeployScripts.</param>
        /// <param name="BeforeDeployScripts">BeforeDeployScripts.</param>
        /// <param name="AfterDeployScripts">AfterDeployScripts.</param>
        /// <param name="XamarinRegisterAndroidProduct">XamarinRegisterAndroidProduct.</param>
        /// <param name="XamarinRegisterIosProduct">XamarinRegisterIosProduct.</param>
        /// <param name="MatrixFastFinish">MatrixFastFinish.</param>
        /// <param name="MatrixAllowFailures">Although the names and values are not enforced, the combinations which are meaningful are documented at https://www.appveyor.com/docs/build-configuration/#allow-failing-jobs.</param>
        /// <param name="MatrixExclude">MatrixExclude.</param>
        /// <param name="Artifacts">Artifacts.</param>
        /// <param name="Notifications">Notifications.</param>
        public ProjectConfiguration(bool? DoNotIncrementBuildNumberOnPullRequests = default(bool?), List<Script> HotFixScripts = default(List<Script>), List<Script> InitScripts = default(List<Script>), ProjectBranchesMode BranchesMode = default(ProjectBranchesMode), List<StringValueObject> IncludeBranches = default(List<StringValueObject>), List<StringValueObject> ExcludeBranches = default(List<StringValueObject>), bool? SkipTags = default(bool?), bool? SkipNonTags = default(bool?), bool? SkipBranchWithPullRequests = default(bool?), List<StringValueObject> SkipCommitsFiles = default(List<StringValueObject>), List<StringValueObject> OnlyCommitsFiles = default(List<StringValueObject>), List<Script> CloneScripts = default(List<Script>), List<Script> OnBuildSuccessScripts = default(List<Script>), List<Script> OnBuildErrorScripts = default(List<Script>), List<Script> OnBuildFinishScripts = default(List<Script>), bool? PatchAssemblyInfo = default(bool?), string AssemblyInfoFile = default(string), string AssemblyVersionFormat = default(string), string AssemblyFileVersionFormat = default(string), string AssemblyInformationalVersionFormat = default(string), bool? PatchDotnetCsproj = default(bool?), string DotnetCsprojFile = default(string), string DotnetCsprojVersionFormat = default(string), string DotnetCsprojPackageVersionFormat = default(string), int? MaxJobs = default(int?), List<StringValueObject> BuildCloud = default(List<StringValueObject>), List<ProjectConfigurationOperatingSystem> OperatingSystem = default(List<ProjectConfigurationOperatingSystem>), List<ProjectConfigurationServices> Services = default(List<ProjectConfigurationServices>), string CloneFolder = default(string), bool? ShallowClone = default(bool?), bool? ForceHttpsClone = default(bool?), int? CloneDepth = default(int?), List<StoredNameValue> EnvironmentVariables = default(List<StoredNameValue>), List<StoredNameValueMatrix> EnvironmentVariablesMatrix = default(List<StoredNameValueMatrix>), List<Script> InstallScripts = default(List<Script>), List<HostEntry> HostsEntries = default(List<HostEntry>), List<StringValueObject> CacheEntries = default(List<StringValueObject>), bool? ConfigureNuGetProjectSource = default(bool?), bool? ConfigureNuGetAccountSource = default(bool?), bool? DisableNuGetPublishOnPullRequests = default(bool?), BuildMode BuildMode = default(BuildMode), List<ProjectConfigurationPlatform> Platform = default(List<ProjectConfigurationPlatform>), List<StringValueObject> Configuration = default(List<StringValueObject>), string MsBuildProjectFileName = default(string), bool? PackageWebApplicationProjects = default(bool?), bool? PackageWebApplicationProjectsXCopy = default(bool?), bool? PackageAzureCloudServiceProjects = default(bool?), bool? PackageNuGetProjects = default(bool?), bool? PackageNuGetSymbols = default(bool?), bool? IncludeNuGetReferences = default(bool?), bool? MsBuildInParallel = default(bool?), MSBuildVerbosity MsBuildVerbosity = default(MSBuildVerbosity), List<Script> BuildScripts = default(List<Script>), List<Script> BeforeBuildScripts = default(List<Script>), List<Script> BeforePackageScripts = default(List<Script>), List<Script> AfterBuildScripts = default(List<Script>), TestMode TestMode = default(TestMode), List<StringValueObject> TestAssemblies = default(List<StringValueObject>), TestCategoriesModeEnum? TestCategoriesMode = default(TestCategoriesModeEnum?), List<StringValueObject> TestCategories = default(List<StringValueObject>), List<ProjectConfigurationTestCategoriesMatrix> TestCategoriesMatrix = default(List<ProjectConfigurationTestCategoriesMatrix>), List<Script> TestScripts = default(List<Script>), List<Script> BeforeTestScripts = default(List<Script>), List<Script> AfterTestScripts = default(List<Script>), DeployMode DeployMode = default(DeployMode), List<DeploymentProvider> Deployments = default(List<DeploymentProvider>), List<Script> DeployScripts = default(List<Script>), List<Script> BeforeDeployScripts = default(List<Script>), List<Script> AfterDeployScripts = default(List<Script>), bool? XamarinRegisterAndroidProduct = default(bool?), bool? XamarinRegisterIosProduct = default(bool?), bool? MatrixFastFinish = default(bool?), List<StoredNameValueMatrix> MatrixAllowFailures = default(List<StoredNameValueMatrix>), List<StoredNameValueMatrix> MatrixExclude = default(List<StoredNameValueMatrix>), List<Artifact> Artifacts = default(List<Artifact>), List<NotificationProviderSettings> Notifications = default(List<NotificationProviderSettings>))
        {
            this.DoNotIncrementBuildNumberOnPullRequests = DoNotIncrementBuildNumberOnPullRequests;
            this.HotFixScripts = HotFixScripts;
            this.InitScripts = InitScripts;
            this.BranchesMode = BranchesMode;
            this.IncludeBranches = IncludeBranches;
            this.ExcludeBranches = ExcludeBranches;
            this.SkipTags = SkipTags;
            this.SkipNonTags = SkipNonTags;
            this.SkipBranchWithPullRequests = SkipBranchWithPullRequests;
            this.SkipCommitsFiles = SkipCommitsFiles;
            this.OnlyCommitsFiles = OnlyCommitsFiles;
            this.CloneScripts = CloneScripts;
            this.OnBuildSuccessScripts = OnBuildSuccessScripts;
            this.OnBuildErrorScripts = OnBuildErrorScripts;
            this.OnBuildFinishScripts = OnBuildFinishScripts;
            this.PatchAssemblyInfo = PatchAssemblyInfo;
            this.AssemblyInfoFile = AssemblyInfoFile;
            this.AssemblyVersionFormat = AssemblyVersionFormat;
            this.AssemblyFileVersionFormat = AssemblyFileVersionFormat;
            this.AssemblyInformationalVersionFormat = AssemblyInformationalVersionFormat;
            this.PatchDotnetCsproj = PatchDotnetCsproj;
            this.DotnetCsprojFile = DotnetCsprojFile;
            this.DotnetCsprojVersionFormat = DotnetCsprojVersionFormat;
            this.DotnetCsprojPackageVersionFormat = DotnetCsprojPackageVersionFormat;
            this.MaxJobs = MaxJobs;
            this.BuildCloud = BuildCloud;
            this.OperatingSystem = OperatingSystem;
            this.Services = Services;
            this.CloneFolder = CloneFolder;
            this.ShallowClone = ShallowClone;
            this.ForceHttpsClone = ForceHttpsClone;
            this.CloneDepth = CloneDepth;
            this.EnvironmentVariables = EnvironmentVariables;
            this.EnvironmentVariablesMatrix = EnvironmentVariablesMatrix;
            this.InstallScripts = InstallScripts;
            this.HostsEntries = HostsEntries;
            this.CacheEntries = CacheEntries;
            this.ConfigureNuGetProjectSource = ConfigureNuGetProjectSource;
            this.ConfigureNuGetAccountSource = ConfigureNuGetAccountSource;
            this.DisableNuGetPublishOnPullRequests = DisableNuGetPublishOnPullRequests;
            this.BuildMode = BuildMode;
            this.Platform = Platform;
            this.Configuration = Configuration;
            this.MsBuildProjectFileName = MsBuildProjectFileName;
            this.PackageWebApplicationProjects = PackageWebApplicationProjects;
            this.PackageWebApplicationProjectsXCopy = PackageWebApplicationProjectsXCopy;
            this.PackageAzureCloudServiceProjects = PackageAzureCloudServiceProjects;
            this.PackageNuGetProjects = PackageNuGetProjects;
            this.PackageNuGetSymbols = PackageNuGetSymbols;
            this.IncludeNuGetReferences = IncludeNuGetReferences;
            this.MsBuildInParallel = MsBuildInParallel;
            this.MsBuildVerbosity = MsBuildVerbosity;
            this.BuildScripts = BuildScripts;
            this.BeforeBuildScripts = BeforeBuildScripts;
            this.BeforePackageScripts = BeforePackageScripts;
            this.AfterBuildScripts = AfterBuildScripts;
            this.TestMode = TestMode;
            this.TestAssemblies = TestAssemblies;
            this.TestCategoriesMode = TestCategoriesMode;
            this.TestCategories = TestCategories;
            this.TestCategoriesMatrix = TestCategoriesMatrix;
            this.TestScripts = TestScripts;
            this.BeforeTestScripts = BeforeTestScripts;
            this.AfterTestScripts = AfterTestScripts;
            this.DeployMode = DeployMode;
            this.Deployments = Deployments;
            this.DeployScripts = DeployScripts;
            this.BeforeDeployScripts = BeforeDeployScripts;
            this.AfterDeployScripts = AfterDeployScripts;
            this.XamarinRegisterAndroidProduct = XamarinRegisterAndroidProduct;
            this.XamarinRegisterIosProduct = XamarinRegisterIosProduct;
            this.MatrixFastFinish = MatrixFastFinish;
            this.MatrixAllowFailures = MatrixAllowFailures;
            this.MatrixExclude = MatrixExclude;
            this.Artifacts = Artifacts;
            this.Notifications = Notifications;
        }
        
        /// <summary>
        /// Gets or Sets DoNotIncrementBuildNumberOnPullRequests
        /// </summary>
        [DataMember(Name="doNotIncrementBuildNumberOnPullRequests", EmitDefaultValue=false)]
        public bool? DoNotIncrementBuildNumberOnPullRequests { get; set; }
        /// <summary>
        /// Gets or Sets HotFixScripts
        /// </summary>
        [DataMember(Name="hotFixScripts", EmitDefaultValue=false)]
        public List<Script> HotFixScripts { get; set; }
        /// <summary>
        /// Gets or Sets InitScripts
        /// </summary>
        [DataMember(Name="initScripts", EmitDefaultValue=false)]
        public List<Script> InitScripts { get; set; }
        /// <summary>
        /// Gets or Sets BranchesMode
        /// </summary>
        [DataMember(Name="branchesMode", EmitDefaultValue=false)]
        public ProjectBranchesMode BranchesMode { get; set; }
        /// <summary>
        /// Gets or Sets IncludeBranches
        /// </summary>
        [DataMember(Name="includeBranches", EmitDefaultValue=false)]
        public List<StringValueObject> IncludeBranches { get; set; }
        /// <summary>
        /// Gets or Sets ExcludeBranches
        /// </summary>
        [DataMember(Name="excludeBranches", EmitDefaultValue=false)]
        public List<StringValueObject> ExcludeBranches { get; set; }
        /// <summary>
        /// Gets or Sets SkipTags
        /// </summary>
        [DataMember(Name="skipTags", EmitDefaultValue=false)]
        public bool? SkipTags { get; set; }
        /// <summary>
        /// Gets or Sets SkipNonTags
        /// </summary>
        [DataMember(Name="skipNonTags", EmitDefaultValue=false)]
        public bool? SkipNonTags { get; set; }
        /// <summary>
        /// Gets or Sets SkipBranchWithPullRequests
        /// </summary>
        [DataMember(Name="skipBranchWithPullRequests", EmitDefaultValue=false)]
        public bool? SkipBranchWithPullRequests { get; set; }
        /// <summary>
        /// Gets or Sets SkipCommitsFiles
        /// </summary>
        [DataMember(Name="skipCommitsFiles", EmitDefaultValue=false)]
        public List<StringValueObject> SkipCommitsFiles { get; set; }
        /// <summary>
        /// Gets or Sets OnlyCommitsFiles
        /// </summary>
        [DataMember(Name="onlyCommitsFiles", EmitDefaultValue=false)]
        public List<StringValueObject> OnlyCommitsFiles { get; set; }
        /// <summary>
        /// Gets or Sets CloneScripts
        /// </summary>
        [DataMember(Name="cloneScripts", EmitDefaultValue=false)]
        public List<Script> CloneScripts { get; set; }
        /// <summary>
        /// Gets or Sets OnBuildSuccessScripts
        /// </summary>
        [DataMember(Name="onBuildSuccessScripts", EmitDefaultValue=false)]
        public List<Script> OnBuildSuccessScripts { get; set; }
        /// <summary>
        /// Gets or Sets OnBuildErrorScripts
        /// </summary>
        [DataMember(Name="onBuildErrorScripts", EmitDefaultValue=false)]
        public List<Script> OnBuildErrorScripts { get; set; }
        /// <summary>
        /// Gets or Sets OnBuildFinishScripts
        /// </summary>
        [DataMember(Name="onBuildFinishScripts", EmitDefaultValue=false)]
        public List<Script> OnBuildFinishScripts { get; set; }
        /// <summary>
        /// Gets or Sets PatchAssemblyInfo
        /// </summary>
        [DataMember(Name="patchAssemblyInfo", EmitDefaultValue=false)]
        public bool? PatchAssemblyInfo { get; set; }
        /// <summary>
        /// Gets or Sets AssemblyInfoFile
        /// </summary>
        [DataMember(Name="assemblyInfoFile", EmitDefaultValue=false)]
        public string AssemblyInfoFile { get; set; }
        /// <summary>
        /// Gets or Sets AssemblyVersionFormat
        /// </summary>
        [DataMember(Name="assemblyVersionFormat", EmitDefaultValue=false)]
        public string AssemblyVersionFormat { get; set; }
        /// <summary>
        /// Gets or Sets AssemblyFileVersionFormat
        /// </summary>
        [DataMember(Name="assemblyFileVersionFormat", EmitDefaultValue=false)]
        public string AssemblyFileVersionFormat { get; set; }
        /// <summary>
        /// Gets or Sets AssemblyInformationalVersionFormat
        /// </summary>
        [DataMember(Name="assemblyInformationalVersionFormat", EmitDefaultValue=false)]
        public string AssemblyInformationalVersionFormat { get; set; }
        /// <summary>
        /// Gets or Sets PatchDotnetCsproj
        /// </summary>
        [DataMember(Name="patchDotnetCsproj", EmitDefaultValue=false)]
        public bool? PatchDotnetCsproj { get; set; }
        /// <summary>
        /// Gets or Sets DotnetCsprojFile
        /// </summary>
        [DataMember(Name="dotnetCsprojFile", EmitDefaultValue=false)]
        public string DotnetCsprojFile { get; set; }
        /// <summary>
        /// Gets or Sets DotnetCsprojVersionFormat
        /// </summary>
        [DataMember(Name="dotnetCsprojVersionFormat", EmitDefaultValue=false)]
        public string DotnetCsprojVersionFormat { get; set; }
        /// <summary>
        /// Gets or Sets DotnetCsprojPackageVersionFormat
        /// </summary>
        [DataMember(Name="dotnetCsprojPackageVersionFormat", EmitDefaultValue=false)]
        public string DotnetCsprojPackageVersionFormat { get; set; }
        /// <summary>
        /// Gets or Sets MaxJobs
        /// </summary>
        [DataMember(Name="maxJobs", EmitDefaultValue=false)]
        public int? MaxJobs { get; set; }
        /// <summary>
        /// Gets or Sets BuildCloud
        /// </summary>
        [DataMember(Name="buildCloud", EmitDefaultValue=false)]
        public List<StringValueObject> BuildCloud { get; set; }
        /// <summary>
        /// Gets or Sets OperatingSystem
        /// </summary>
        [DataMember(Name="operatingSystem", EmitDefaultValue=false)]
        public List<ProjectConfigurationOperatingSystem> OperatingSystem { get; set; }
        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<ProjectConfigurationServices> Services { get; set; }
        /// <summary>
        /// Gets or Sets CloneFolder
        /// </summary>
        [DataMember(Name="cloneFolder", EmitDefaultValue=false)]
        public string CloneFolder { get; set; }
        /// <summary>
        /// Gets or Sets ShallowClone
        /// </summary>
        [DataMember(Name="shallowClone", EmitDefaultValue=false)]
        public bool? ShallowClone { get; set; }
        /// <summary>
        /// Gets or Sets ForceHttpsClone
        /// </summary>
        [DataMember(Name="forceHttpsClone", EmitDefaultValue=false)]
        public bool? ForceHttpsClone { get; set; }
        /// <summary>
        /// Gets or Sets CloneDepth
        /// </summary>
        [DataMember(Name="cloneDepth", EmitDefaultValue=false)]
        public int? CloneDepth { get; set; }
        /// <summary>
        /// Gets or Sets EnvironmentVariables
        /// </summary>
        [DataMember(Name="environmentVariables", EmitDefaultValue=false)]
        public List<StoredNameValue> EnvironmentVariables { get; set; }
        /// <summary>
        /// Gets or Sets EnvironmentVariablesMatrix
        /// </summary>
        [DataMember(Name="environmentVariablesMatrix", EmitDefaultValue=false)]
        public List<StoredNameValueMatrix> EnvironmentVariablesMatrix { get; set; }
        /// <summary>
        /// Gets or Sets InstallScripts
        /// </summary>
        [DataMember(Name="installScripts", EmitDefaultValue=false)]
        public List<Script> InstallScripts { get; set; }
        /// <summary>
        /// Gets or Sets HostsEntries
        /// </summary>
        [DataMember(Name="hostsEntries", EmitDefaultValue=false)]
        public List<HostEntry> HostsEntries { get; set; }
        /// <summary>
        /// Gets or Sets CacheEntries
        /// </summary>
        [DataMember(Name="cacheEntries", EmitDefaultValue=false)]
        public List<StringValueObject> CacheEntries { get; set; }
        /// <summary>
        /// Gets or Sets ConfigureNuGetProjectSource
        /// </summary>
        [DataMember(Name="configureNuGetProjectSource", EmitDefaultValue=false)]
        public bool? ConfigureNuGetProjectSource { get; set; }
        /// <summary>
        /// Gets or Sets ConfigureNuGetAccountSource
        /// </summary>
        [DataMember(Name="configureNuGetAccountSource", EmitDefaultValue=false)]
        public bool? ConfigureNuGetAccountSource { get; set; }
        /// <summary>
        /// Gets or Sets DisableNuGetPublishOnPullRequests
        /// </summary>
        [DataMember(Name="disableNuGetPublishOnPullRequests", EmitDefaultValue=false)]
        public bool? DisableNuGetPublishOnPullRequests { get; set; }
        /// <summary>
        /// Gets or Sets BuildMode
        /// </summary>
        [DataMember(Name="buildMode", EmitDefaultValue=false)]
        public BuildMode BuildMode { get; set; }
        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name="platform", EmitDefaultValue=false)]
        public List<ProjectConfigurationPlatform> Platform { get; set; }
        /// <summary>
        /// Gets or Sets Configuration
        /// </summary>
        [DataMember(Name="configuration", EmitDefaultValue=false)]
        public List<StringValueObject> Configuration { get; set; }
        /// <summary>
        /// Gets or Sets MsBuildProjectFileName
        /// </summary>
        [DataMember(Name="msBuildProjectFileName", EmitDefaultValue=false)]
        public string MsBuildProjectFileName { get; set; }
        /// <summary>
        /// Gets or Sets PackageWebApplicationProjects
        /// </summary>
        [DataMember(Name="packageWebApplicationProjects", EmitDefaultValue=false)]
        public bool? PackageWebApplicationProjects { get; set; }
        /// <summary>
        /// Gets or Sets PackageWebApplicationProjectsXCopy
        /// </summary>
        [DataMember(Name="packageWebApplicationProjectsXCopy", EmitDefaultValue=false)]
        public bool? PackageWebApplicationProjectsXCopy { get; set; }
        /// <summary>
        /// Gets or Sets PackageAzureCloudServiceProjects
        /// </summary>
        [DataMember(Name="packageAzureCloudServiceProjects", EmitDefaultValue=false)]
        public bool? PackageAzureCloudServiceProjects { get; set; }
        /// <summary>
        /// Gets or Sets PackageNuGetProjects
        /// </summary>
        [DataMember(Name="packageNuGetProjects", EmitDefaultValue=false)]
        public bool? PackageNuGetProjects { get; set; }
        /// <summary>
        /// Gets or Sets PackageNuGetSymbols
        /// </summary>
        [DataMember(Name="packageNuGetSymbols", EmitDefaultValue=false)]
        public bool? PackageNuGetSymbols { get; set; }
        /// <summary>
        /// Gets or Sets IncludeNuGetReferences
        /// </summary>
        [DataMember(Name="includeNuGetReferences", EmitDefaultValue=false)]
        public bool? IncludeNuGetReferences { get; set; }
        /// <summary>
        /// Gets or Sets MsBuildInParallel
        /// </summary>
        [DataMember(Name="msBuildInParallel", EmitDefaultValue=false)]
        public bool? MsBuildInParallel { get; set; }
        /// <summary>
        /// Gets or Sets MsBuildVerbosity
        /// </summary>
        [DataMember(Name="msBuildVerbosity", EmitDefaultValue=false)]
        public MSBuildVerbosity MsBuildVerbosity { get; set; }
        /// <summary>
        /// Only set/used when &#x60;buildMode&#x60; is &#x60;script&#x60;.
        /// </summary>
        /// <value>Only set/used when &#x60;buildMode&#x60; is &#x60;script&#x60;.</value>
        [DataMember(Name="buildScripts", EmitDefaultValue=false)]
        public List<Script> BuildScripts { get; set; }
        /// <summary>
        /// Gets or Sets BeforeBuildScripts
        /// </summary>
        [DataMember(Name="beforeBuildScripts", EmitDefaultValue=false)]
        public List<Script> BeforeBuildScripts { get; set; }
        /// <summary>
        /// Gets or Sets BeforePackageScripts
        /// </summary>
        [DataMember(Name="beforePackageScripts", EmitDefaultValue=false)]
        public List<Script> BeforePackageScripts { get; set; }
        /// <summary>
        /// Gets or Sets AfterBuildScripts
        /// </summary>
        [DataMember(Name="afterBuildScripts", EmitDefaultValue=false)]
        public List<Script> AfterBuildScripts { get; set; }
        /// <summary>
        /// Gets or Sets TestMode
        /// </summary>
        [DataMember(Name="testMode", EmitDefaultValue=false)]
        public TestMode TestMode { get; set; }
        /// <summary>
        /// Gets or Sets TestAssemblies
        /// </summary>
        [DataMember(Name="testAssemblies", EmitDefaultValue=false)]
        public List<StringValueObject> TestAssemblies { get; set; }
        /// <summary>
        /// Gets or Sets TestCategories
        /// </summary>
        [DataMember(Name="testCategories", EmitDefaultValue=false)]
        public List<StringValueObject> TestCategories { get; set; }
        /// <summary>
        /// Gets or Sets TestCategoriesMatrix
        /// </summary>
        [DataMember(Name="testCategoriesMatrix", EmitDefaultValue=false)]
        public List<ProjectConfigurationTestCategoriesMatrix> TestCategoriesMatrix { get; set; }
        /// <summary>
        /// Only set/used when &#x60;testMode&#x60; is &#x60;script&#x60;.
        /// </summary>
        /// <value>Only set/used when &#x60;testMode&#x60; is &#x60;script&#x60;.</value>
        [DataMember(Name="testScripts", EmitDefaultValue=false)]
        public List<Script> TestScripts { get; set; }
        /// <summary>
        /// Gets or Sets BeforeTestScripts
        /// </summary>
        [DataMember(Name="beforeTestScripts", EmitDefaultValue=false)]
        public List<Script> BeforeTestScripts { get; set; }
        /// <summary>
        /// Gets or Sets AfterTestScripts
        /// </summary>
        [DataMember(Name="afterTestScripts", EmitDefaultValue=false)]
        public List<Script> AfterTestScripts { get; set; }
        /// <summary>
        /// Gets or Sets DeployMode
        /// </summary>
        [DataMember(Name="deployMode", EmitDefaultValue=false)]
        public DeployMode DeployMode { get; set; }
        /// <summary>
        /// Gets or Sets Deployments
        /// </summary>
        [DataMember(Name="deployments", EmitDefaultValue=false)]
        public List<DeploymentProvider> Deployments { get; set; }
        /// <summary>
        /// Gets or Sets DeployScripts
        /// </summary>
        [DataMember(Name="deployScripts", EmitDefaultValue=false)]
        public List<Script> DeployScripts { get; set; }
        /// <summary>
        /// Gets or Sets BeforeDeployScripts
        /// </summary>
        [DataMember(Name="beforeDeployScripts", EmitDefaultValue=false)]
        public List<Script> BeforeDeployScripts { get; set; }
        /// <summary>
        /// Gets or Sets AfterDeployScripts
        /// </summary>
        [DataMember(Name="afterDeployScripts", EmitDefaultValue=false)]
        public List<Script> AfterDeployScripts { get; set; }
        /// <summary>
        /// Gets or Sets XamarinRegisterAndroidProduct
        /// </summary>
        [DataMember(Name="xamarinRegisterAndroidProduct", EmitDefaultValue=false)]
        public bool? XamarinRegisterAndroidProduct { get; set; }
        /// <summary>
        /// Gets or Sets XamarinRegisterIosProduct
        /// </summary>
        [DataMember(Name="xamarinRegisterIosProduct", EmitDefaultValue=false)]
        public bool? XamarinRegisterIosProduct { get; set; }
        /// <summary>
        /// Gets or Sets MatrixFastFinish
        /// </summary>
        [DataMember(Name="matrixFastFinish", EmitDefaultValue=false)]
        public bool? MatrixFastFinish { get; set; }
        /// <summary>
        /// Although the names and values are not enforced, the combinations which are meaningful are documented at https://www.appveyor.com/docs/build-configuration/#allow-failing-jobs
        /// </summary>
        /// <value>Although the names and values are not enforced, the combinations which are meaningful are documented at https://www.appveyor.com/docs/build-configuration/#allow-failing-jobs</value>
        [DataMember(Name="matrixAllowFailures", EmitDefaultValue=false)]
        public List<StoredNameValueMatrix> MatrixAllowFailures { get; set; }
        /// <summary>
        /// Gets or Sets MatrixExclude
        /// </summary>
        [DataMember(Name="matrixExclude", EmitDefaultValue=false)]
        public List<StoredNameValueMatrix> MatrixExclude { get; set; }
        /// <summary>
        /// Gets or Sets Artifacts
        /// </summary>
        [DataMember(Name="artifacts", EmitDefaultValue=false)]
        public List<Artifact> Artifacts { get; set; }
        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public List<NotificationProviderSettings> Notifications { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectConfiguration {\n");
            sb.Append("  DoNotIncrementBuildNumberOnPullRequests: ").Append(DoNotIncrementBuildNumberOnPullRequests).Append("\n");
            sb.Append("  HotFixScripts: ").Append(HotFixScripts).Append("\n");
            sb.Append("  InitScripts: ").Append(InitScripts).Append("\n");
            sb.Append("  BranchesMode: ").Append(BranchesMode).Append("\n");
            sb.Append("  IncludeBranches: ").Append(IncludeBranches).Append("\n");
            sb.Append("  ExcludeBranches: ").Append(ExcludeBranches).Append("\n");
            sb.Append("  SkipTags: ").Append(SkipTags).Append("\n");
            sb.Append("  SkipNonTags: ").Append(SkipNonTags).Append("\n");
            sb.Append("  SkipBranchWithPullRequests: ").Append(SkipBranchWithPullRequests).Append("\n");
            sb.Append("  SkipCommitsFiles: ").Append(SkipCommitsFiles).Append("\n");
            sb.Append("  OnlyCommitsFiles: ").Append(OnlyCommitsFiles).Append("\n");
            sb.Append("  CloneScripts: ").Append(CloneScripts).Append("\n");
            sb.Append("  OnBuildSuccessScripts: ").Append(OnBuildSuccessScripts).Append("\n");
            sb.Append("  OnBuildErrorScripts: ").Append(OnBuildErrorScripts).Append("\n");
            sb.Append("  OnBuildFinishScripts: ").Append(OnBuildFinishScripts).Append("\n");
            sb.Append("  PatchAssemblyInfo: ").Append(PatchAssemblyInfo).Append("\n");
            sb.Append("  AssemblyInfoFile: ").Append(AssemblyInfoFile).Append("\n");
            sb.Append("  AssemblyVersionFormat: ").Append(AssemblyVersionFormat).Append("\n");
            sb.Append("  AssemblyFileVersionFormat: ").Append(AssemblyFileVersionFormat).Append("\n");
            sb.Append("  AssemblyInformationalVersionFormat: ").Append(AssemblyInformationalVersionFormat).Append("\n");
            sb.Append("  PatchDotnetCsproj: ").Append(PatchDotnetCsproj).Append("\n");
            sb.Append("  DotnetCsprojFile: ").Append(DotnetCsprojFile).Append("\n");
            sb.Append("  DotnetCsprojVersionFormat: ").Append(DotnetCsprojVersionFormat).Append("\n");
            sb.Append("  DotnetCsprojPackageVersionFormat: ").Append(DotnetCsprojPackageVersionFormat).Append("\n");
            sb.Append("  MaxJobs: ").Append(MaxJobs).Append("\n");
            sb.Append("  BuildCloud: ").Append(BuildCloud).Append("\n");
            sb.Append("  OperatingSystem: ").Append(OperatingSystem).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  CloneFolder: ").Append(CloneFolder).Append("\n");
            sb.Append("  ShallowClone: ").Append(ShallowClone).Append("\n");
            sb.Append("  ForceHttpsClone: ").Append(ForceHttpsClone).Append("\n");
            sb.Append("  CloneDepth: ").Append(CloneDepth).Append("\n");
            sb.Append("  EnvironmentVariables: ").Append(EnvironmentVariables).Append("\n");
            sb.Append("  EnvironmentVariablesMatrix: ").Append(EnvironmentVariablesMatrix).Append("\n");
            sb.Append("  InstallScripts: ").Append(InstallScripts).Append("\n");
            sb.Append("  HostsEntries: ").Append(HostsEntries).Append("\n");
            sb.Append("  CacheEntries: ").Append(CacheEntries).Append("\n");
            sb.Append("  ConfigureNuGetProjectSource: ").Append(ConfigureNuGetProjectSource).Append("\n");
            sb.Append("  ConfigureNuGetAccountSource: ").Append(ConfigureNuGetAccountSource).Append("\n");
            sb.Append("  DisableNuGetPublishOnPullRequests: ").Append(DisableNuGetPublishOnPullRequests).Append("\n");
            sb.Append("  BuildMode: ").Append(BuildMode).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("  MsBuildProjectFileName: ").Append(MsBuildProjectFileName).Append("\n");
            sb.Append("  PackageWebApplicationProjects: ").Append(PackageWebApplicationProjects).Append("\n");
            sb.Append("  PackageWebApplicationProjectsXCopy: ").Append(PackageWebApplicationProjectsXCopy).Append("\n");
            sb.Append("  PackageAzureCloudServiceProjects: ").Append(PackageAzureCloudServiceProjects).Append("\n");
            sb.Append("  PackageNuGetProjects: ").Append(PackageNuGetProjects).Append("\n");
            sb.Append("  PackageNuGetSymbols: ").Append(PackageNuGetSymbols).Append("\n");
            sb.Append("  IncludeNuGetReferences: ").Append(IncludeNuGetReferences).Append("\n");
            sb.Append("  MsBuildInParallel: ").Append(MsBuildInParallel).Append("\n");
            sb.Append("  MsBuildVerbosity: ").Append(MsBuildVerbosity).Append("\n");
            sb.Append("  BuildScripts: ").Append(BuildScripts).Append("\n");
            sb.Append("  BeforeBuildScripts: ").Append(BeforeBuildScripts).Append("\n");
            sb.Append("  BeforePackageScripts: ").Append(BeforePackageScripts).Append("\n");
            sb.Append("  AfterBuildScripts: ").Append(AfterBuildScripts).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  TestAssemblies: ").Append(TestAssemblies).Append("\n");
            sb.Append("  TestCategoriesMode: ").Append(TestCategoriesMode).Append("\n");
            sb.Append("  TestCategories: ").Append(TestCategories).Append("\n");
            sb.Append("  TestCategoriesMatrix: ").Append(TestCategoriesMatrix).Append("\n");
            sb.Append("  TestScripts: ").Append(TestScripts).Append("\n");
            sb.Append("  BeforeTestScripts: ").Append(BeforeTestScripts).Append("\n");
            sb.Append("  AfterTestScripts: ").Append(AfterTestScripts).Append("\n");
            sb.Append("  DeployMode: ").Append(DeployMode).Append("\n");
            sb.Append("  Deployments: ").Append(Deployments).Append("\n");
            sb.Append("  DeployScripts: ").Append(DeployScripts).Append("\n");
            sb.Append("  BeforeDeployScripts: ").Append(BeforeDeployScripts).Append("\n");
            sb.Append("  AfterDeployScripts: ").Append(AfterDeployScripts).Append("\n");
            sb.Append("  XamarinRegisterAndroidProduct: ").Append(XamarinRegisterAndroidProduct).Append("\n");
            sb.Append("  XamarinRegisterIosProduct: ").Append(XamarinRegisterIosProduct).Append("\n");
            sb.Append("  MatrixFastFinish: ").Append(MatrixFastFinish).Append("\n");
            sb.Append("  MatrixAllowFailures: ").Append(MatrixAllowFailures).Append("\n");
            sb.Append("  MatrixExclude: ").Append(MatrixExclude).Append("\n");
            sb.Append("  Artifacts: ").Append(Artifacts).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProjectConfiguration);
        }

        /// <summary>
        /// Returns true if ProjectConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectConfiguration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DoNotIncrementBuildNumberOnPullRequests == other.DoNotIncrementBuildNumberOnPullRequests ||
                    this.DoNotIncrementBuildNumberOnPullRequests != null &&
                    this.DoNotIncrementBuildNumberOnPullRequests.Equals(other.DoNotIncrementBuildNumberOnPullRequests)
                ) && 
                (
                    this.HotFixScripts == other.HotFixScripts ||
                    this.HotFixScripts != null &&
                    this.HotFixScripts.SequenceEqual(other.HotFixScripts)
                ) && 
                (
                    this.InitScripts == other.InitScripts ||
                    this.InitScripts != null &&
                    this.InitScripts.SequenceEqual(other.InitScripts)
                ) && 
                (
                    this.BranchesMode == other.BranchesMode ||
                    this.BranchesMode != null &&
                    this.BranchesMode.Equals(other.BranchesMode)
                ) && 
                (
                    this.IncludeBranches == other.IncludeBranches ||
                    this.IncludeBranches != null &&
                    this.IncludeBranches.SequenceEqual(other.IncludeBranches)
                ) && 
                (
                    this.ExcludeBranches == other.ExcludeBranches ||
                    this.ExcludeBranches != null &&
                    this.ExcludeBranches.SequenceEqual(other.ExcludeBranches)
                ) && 
                (
                    this.SkipTags == other.SkipTags ||
                    this.SkipTags != null &&
                    this.SkipTags.Equals(other.SkipTags)
                ) && 
                (
                    this.SkipNonTags == other.SkipNonTags ||
                    this.SkipNonTags != null &&
                    this.SkipNonTags.Equals(other.SkipNonTags)
                ) && 
                (
                    this.SkipBranchWithPullRequests == other.SkipBranchWithPullRequests ||
                    this.SkipBranchWithPullRequests != null &&
                    this.SkipBranchWithPullRequests.Equals(other.SkipBranchWithPullRequests)
                ) && 
                (
                    this.SkipCommitsFiles == other.SkipCommitsFiles ||
                    this.SkipCommitsFiles != null &&
                    this.SkipCommitsFiles.SequenceEqual(other.SkipCommitsFiles)
                ) && 
                (
                    this.OnlyCommitsFiles == other.OnlyCommitsFiles ||
                    this.OnlyCommitsFiles != null &&
                    this.OnlyCommitsFiles.SequenceEqual(other.OnlyCommitsFiles)
                ) && 
                (
                    this.CloneScripts == other.CloneScripts ||
                    this.CloneScripts != null &&
                    this.CloneScripts.SequenceEqual(other.CloneScripts)
                ) && 
                (
                    this.OnBuildSuccessScripts == other.OnBuildSuccessScripts ||
                    this.OnBuildSuccessScripts != null &&
                    this.OnBuildSuccessScripts.SequenceEqual(other.OnBuildSuccessScripts)
                ) && 
                (
                    this.OnBuildErrorScripts == other.OnBuildErrorScripts ||
                    this.OnBuildErrorScripts != null &&
                    this.OnBuildErrorScripts.SequenceEqual(other.OnBuildErrorScripts)
                ) && 
                (
                    this.OnBuildFinishScripts == other.OnBuildFinishScripts ||
                    this.OnBuildFinishScripts != null &&
                    this.OnBuildFinishScripts.SequenceEqual(other.OnBuildFinishScripts)
                ) && 
                (
                    this.PatchAssemblyInfo == other.PatchAssemblyInfo ||
                    this.PatchAssemblyInfo != null &&
                    this.PatchAssemblyInfo.Equals(other.PatchAssemblyInfo)
                ) && 
                (
                    this.AssemblyInfoFile == other.AssemblyInfoFile ||
                    this.AssemblyInfoFile != null &&
                    this.AssemblyInfoFile.Equals(other.AssemblyInfoFile)
                ) && 
                (
                    this.AssemblyVersionFormat == other.AssemblyVersionFormat ||
                    this.AssemblyVersionFormat != null &&
                    this.AssemblyVersionFormat.Equals(other.AssemblyVersionFormat)
                ) && 
                (
                    this.AssemblyFileVersionFormat == other.AssemblyFileVersionFormat ||
                    this.AssemblyFileVersionFormat != null &&
                    this.AssemblyFileVersionFormat.Equals(other.AssemblyFileVersionFormat)
                ) && 
                (
                    this.AssemblyInformationalVersionFormat == other.AssemblyInformationalVersionFormat ||
                    this.AssemblyInformationalVersionFormat != null &&
                    this.AssemblyInformationalVersionFormat.Equals(other.AssemblyInformationalVersionFormat)
                ) && 
                (
                    this.PatchDotnetCsproj == other.PatchDotnetCsproj ||
                    this.PatchDotnetCsproj != null &&
                    this.PatchDotnetCsproj.Equals(other.PatchDotnetCsproj)
                ) && 
                (
                    this.DotnetCsprojFile == other.DotnetCsprojFile ||
                    this.DotnetCsprojFile != null &&
                    this.DotnetCsprojFile.Equals(other.DotnetCsprojFile)
                ) && 
                (
                    this.DotnetCsprojVersionFormat == other.DotnetCsprojVersionFormat ||
                    this.DotnetCsprojVersionFormat != null &&
                    this.DotnetCsprojVersionFormat.Equals(other.DotnetCsprojVersionFormat)
                ) && 
                (
                    this.DotnetCsprojPackageVersionFormat == other.DotnetCsprojPackageVersionFormat ||
                    this.DotnetCsprojPackageVersionFormat != null &&
                    this.DotnetCsprojPackageVersionFormat.Equals(other.DotnetCsprojPackageVersionFormat)
                ) && 
                (
                    this.MaxJobs == other.MaxJobs ||
                    this.MaxJobs != null &&
                    this.MaxJobs.Equals(other.MaxJobs)
                ) && 
                (
                    this.BuildCloud == other.BuildCloud ||
                    this.BuildCloud != null &&
                    this.BuildCloud.SequenceEqual(other.BuildCloud)
                ) && 
                (
                    this.OperatingSystem == other.OperatingSystem ||
                    this.OperatingSystem != null &&
                    this.OperatingSystem.SequenceEqual(other.OperatingSystem)
                ) && 
                (
                    this.Services == other.Services ||
                    this.Services != null &&
                    this.Services.SequenceEqual(other.Services)
                ) && 
                (
                    this.CloneFolder == other.CloneFolder ||
                    this.CloneFolder != null &&
                    this.CloneFolder.Equals(other.CloneFolder)
                ) && 
                (
                    this.ShallowClone == other.ShallowClone ||
                    this.ShallowClone != null &&
                    this.ShallowClone.Equals(other.ShallowClone)
                ) && 
                (
                    this.ForceHttpsClone == other.ForceHttpsClone ||
                    this.ForceHttpsClone != null &&
                    this.ForceHttpsClone.Equals(other.ForceHttpsClone)
                ) && 
                (
                    this.CloneDepth == other.CloneDepth ||
                    this.CloneDepth != null &&
                    this.CloneDepth.Equals(other.CloneDepth)
                ) && 
                (
                    this.EnvironmentVariables == other.EnvironmentVariables ||
                    this.EnvironmentVariables != null &&
                    this.EnvironmentVariables.SequenceEqual(other.EnvironmentVariables)
                ) && 
                (
                    this.EnvironmentVariablesMatrix == other.EnvironmentVariablesMatrix ||
                    this.EnvironmentVariablesMatrix != null &&
                    this.EnvironmentVariablesMatrix.SequenceEqual(other.EnvironmentVariablesMatrix)
                ) && 
                (
                    this.InstallScripts == other.InstallScripts ||
                    this.InstallScripts != null &&
                    this.InstallScripts.SequenceEqual(other.InstallScripts)
                ) && 
                (
                    this.HostsEntries == other.HostsEntries ||
                    this.HostsEntries != null &&
                    this.HostsEntries.SequenceEqual(other.HostsEntries)
                ) && 
                (
                    this.CacheEntries == other.CacheEntries ||
                    this.CacheEntries != null &&
                    this.CacheEntries.SequenceEqual(other.CacheEntries)
                ) && 
                (
                    this.ConfigureNuGetProjectSource == other.ConfigureNuGetProjectSource ||
                    this.ConfigureNuGetProjectSource != null &&
                    this.ConfigureNuGetProjectSource.Equals(other.ConfigureNuGetProjectSource)
                ) && 
                (
                    this.ConfigureNuGetAccountSource == other.ConfigureNuGetAccountSource ||
                    this.ConfigureNuGetAccountSource != null &&
                    this.ConfigureNuGetAccountSource.Equals(other.ConfigureNuGetAccountSource)
                ) && 
                (
                    this.DisableNuGetPublishOnPullRequests == other.DisableNuGetPublishOnPullRequests ||
                    this.DisableNuGetPublishOnPullRequests != null &&
                    this.DisableNuGetPublishOnPullRequests.Equals(other.DisableNuGetPublishOnPullRequests)
                ) && 
                (
                    this.BuildMode == other.BuildMode ||
                    this.BuildMode != null &&
                    this.BuildMode.Equals(other.BuildMode)
                ) && 
                (
                    this.Platform == other.Platform ||
                    this.Platform != null &&
                    this.Platform.SequenceEqual(other.Platform)
                ) && 
                (
                    this.Configuration == other.Configuration ||
                    this.Configuration != null &&
                    this.Configuration.SequenceEqual(other.Configuration)
                ) && 
                (
                    this.MsBuildProjectFileName == other.MsBuildProjectFileName ||
                    this.MsBuildProjectFileName != null &&
                    this.MsBuildProjectFileName.Equals(other.MsBuildProjectFileName)
                ) && 
                (
                    this.PackageWebApplicationProjects == other.PackageWebApplicationProjects ||
                    this.PackageWebApplicationProjects != null &&
                    this.PackageWebApplicationProjects.Equals(other.PackageWebApplicationProjects)
                ) && 
                (
                    this.PackageWebApplicationProjectsXCopy == other.PackageWebApplicationProjectsXCopy ||
                    this.PackageWebApplicationProjectsXCopy != null &&
                    this.PackageWebApplicationProjectsXCopy.Equals(other.PackageWebApplicationProjectsXCopy)
                ) && 
                (
                    this.PackageAzureCloudServiceProjects == other.PackageAzureCloudServiceProjects ||
                    this.PackageAzureCloudServiceProjects != null &&
                    this.PackageAzureCloudServiceProjects.Equals(other.PackageAzureCloudServiceProjects)
                ) && 
                (
                    this.PackageNuGetProjects == other.PackageNuGetProjects ||
                    this.PackageNuGetProjects != null &&
                    this.PackageNuGetProjects.Equals(other.PackageNuGetProjects)
                ) && 
                (
                    this.PackageNuGetSymbols == other.PackageNuGetSymbols ||
                    this.PackageNuGetSymbols != null &&
                    this.PackageNuGetSymbols.Equals(other.PackageNuGetSymbols)
                ) && 
                (
                    this.IncludeNuGetReferences == other.IncludeNuGetReferences ||
                    this.IncludeNuGetReferences != null &&
                    this.IncludeNuGetReferences.Equals(other.IncludeNuGetReferences)
                ) && 
                (
                    this.MsBuildInParallel == other.MsBuildInParallel ||
                    this.MsBuildInParallel != null &&
                    this.MsBuildInParallel.Equals(other.MsBuildInParallel)
                ) && 
                (
                    this.MsBuildVerbosity == other.MsBuildVerbosity ||
                    this.MsBuildVerbosity != null &&
                    this.MsBuildVerbosity.Equals(other.MsBuildVerbosity)
                ) && 
                (
                    this.BuildScripts == other.BuildScripts ||
                    this.BuildScripts != null &&
                    this.BuildScripts.SequenceEqual(other.BuildScripts)
                ) && 
                (
                    this.BeforeBuildScripts == other.BeforeBuildScripts ||
                    this.BeforeBuildScripts != null &&
                    this.BeforeBuildScripts.SequenceEqual(other.BeforeBuildScripts)
                ) && 
                (
                    this.BeforePackageScripts == other.BeforePackageScripts ||
                    this.BeforePackageScripts != null &&
                    this.BeforePackageScripts.SequenceEqual(other.BeforePackageScripts)
                ) && 
                (
                    this.AfterBuildScripts == other.AfterBuildScripts ||
                    this.AfterBuildScripts != null &&
                    this.AfterBuildScripts.SequenceEqual(other.AfterBuildScripts)
                ) && 
                (
                    this.TestMode == other.TestMode ||
                    this.TestMode != null &&
                    this.TestMode.Equals(other.TestMode)
                ) && 
                (
                    this.TestAssemblies == other.TestAssemblies ||
                    this.TestAssemblies != null &&
                    this.TestAssemblies.SequenceEqual(other.TestAssemblies)
                ) && 
                (
                    this.TestCategoriesMode == other.TestCategoriesMode ||
                    this.TestCategoriesMode != null &&
                    this.TestCategoriesMode.Equals(other.TestCategoriesMode)
                ) && 
                (
                    this.TestCategories == other.TestCategories ||
                    this.TestCategories != null &&
                    this.TestCategories.SequenceEqual(other.TestCategories)
                ) && 
                (
                    this.TestCategoriesMatrix == other.TestCategoriesMatrix ||
                    this.TestCategoriesMatrix != null &&
                    this.TestCategoriesMatrix.SequenceEqual(other.TestCategoriesMatrix)
                ) && 
                (
                    this.TestScripts == other.TestScripts ||
                    this.TestScripts != null &&
                    this.TestScripts.SequenceEqual(other.TestScripts)
                ) && 
                (
                    this.BeforeTestScripts == other.BeforeTestScripts ||
                    this.BeforeTestScripts != null &&
                    this.BeforeTestScripts.SequenceEqual(other.BeforeTestScripts)
                ) && 
                (
                    this.AfterTestScripts == other.AfterTestScripts ||
                    this.AfterTestScripts != null &&
                    this.AfterTestScripts.SequenceEqual(other.AfterTestScripts)
                ) && 
                (
                    this.DeployMode == other.DeployMode ||
                    this.DeployMode != null &&
                    this.DeployMode.Equals(other.DeployMode)
                ) && 
                (
                    this.Deployments == other.Deployments ||
                    this.Deployments != null &&
                    this.Deployments.SequenceEqual(other.Deployments)
                ) && 
                (
                    this.DeployScripts == other.DeployScripts ||
                    this.DeployScripts != null &&
                    this.DeployScripts.SequenceEqual(other.DeployScripts)
                ) && 
                (
                    this.BeforeDeployScripts == other.BeforeDeployScripts ||
                    this.BeforeDeployScripts != null &&
                    this.BeforeDeployScripts.SequenceEqual(other.BeforeDeployScripts)
                ) && 
                (
                    this.AfterDeployScripts == other.AfterDeployScripts ||
                    this.AfterDeployScripts != null &&
                    this.AfterDeployScripts.SequenceEqual(other.AfterDeployScripts)
                ) && 
                (
                    this.XamarinRegisterAndroidProduct == other.XamarinRegisterAndroidProduct ||
                    this.XamarinRegisterAndroidProduct != null &&
                    this.XamarinRegisterAndroidProduct.Equals(other.XamarinRegisterAndroidProduct)
                ) && 
                (
                    this.XamarinRegisterIosProduct == other.XamarinRegisterIosProduct ||
                    this.XamarinRegisterIosProduct != null &&
                    this.XamarinRegisterIosProduct.Equals(other.XamarinRegisterIosProduct)
                ) && 
                (
                    this.MatrixFastFinish == other.MatrixFastFinish ||
                    this.MatrixFastFinish != null &&
                    this.MatrixFastFinish.Equals(other.MatrixFastFinish)
                ) && 
                (
                    this.MatrixAllowFailures == other.MatrixAllowFailures ||
                    this.MatrixAllowFailures != null &&
                    this.MatrixAllowFailures.SequenceEqual(other.MatrixAllowFailures)
                ) && 
                (
                    this.MatrixExclude == other.MatrixExclude ||
                    this.MatrixExclude != null &&
                    this.MatrixExclude.SequenceEqual(other.MatrixExclude)
                ) && 
                (
                    this.Artifacts == other.Artifacts ||
                    this.Artifacts != null &&
                    this.Artifacts.SequenceEqual(other.Artifacts)
                ) && 
                (
                    this.Notifications == other.Notifications ||
                    this.Notifications != null &&
                    this.Notifications.SequenceEqual(other.Notifications)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DoNotIncrementBuildNumberOnPullRequests != null)
                    hash = hash * 59 + this.DoNotIncrementBuildNumberOnPullRequests.GetHashCode();
                if (this.HotFixScripts != null)
                    hash = hash * 59 + this.HotFixScripts.GetHashCode();
                if (this.InitScripts != null)
                    hash = hash * 59 + this.InitScripts.GetHashCode();
                if (this.BranchesMode != null)
                    hash = hash * 59 + this.BranchesMode.GetHashCode();
                if (this.IncludeBranches != null)
                    hash = hash * 59 + this.IncludeBranches.GetHashCode();
                if (this.ExcludeBranches != null)
                    hash = hash * 59 + this.ExcludeBranches.GetHashCode();
                if (this.SkipTags != null)
                    hash = hash * 59 + this.SkipTags.GetHashCode();
                if (this.SkipNonTags != null)
                    hash = hash * 59 + this.SkipNonTags.GetHashCode();
                if (this.SkipBranchWithPullRequests != null)
                    hash = hash * 59 + this.SkipBranchWithPullRequests.GetHashCode();
                if (this.SkipCommitsFiles != null)
                    hash = hash * 59 + this.SkipCommitsFiles.GetHashCode();
                if (this.OnlyCommitsFiles != null)
                    hash = hash * 59 + this.OnlyCommitsFiles.GetHashCode();
                if (this.CloneScripts != null)
                    hash = hash * 59 + this.CloneScripts.GetHashCode();
                if (this.OnBuildSuccessScripts != null)
                    hash = hash * 59 + this.OnBuildSuccessScripts.GetHashCode();
                if (this.OnBuildErrorScripts != null)
                    hash = hash * 59 + this.OnBuildErrorScripts.GetHashCode();
                if (this.OnBuildFinishScripts != null)
                    hash = hash * 59 + this.OnBuildFinishScripts.GetHashCode();
                if (this.PatchAssemblyInfo != null)
                    hash = hash * 59 + this.PatchAssemblyInfo.GetHashCode();
                if (this.AssemblyInfoFile != null)
                    hash = hash * 59 + this.AssemblyInfoFile.GetHashCode();
                if (this.AssemblyVersionFormat != null)
                    hash = hash * 59 + this.AssemblyVersionFormat.GetHashCode();
                if (this.AssemblyFileVersionFormat != null)
                    hash = hash * 59 + this.AssemblyFileVersionFormat.GetHashCode();
                if (this.AssemblyInformationalVersionFormat != null)
                    hash = hash * 59 + this.AssemblyInformationalVersionFormat.GetHashCode();
                if (this.PatchDotnetCsproj != null)
                    hash = hash * 59 + this.PatchDotnetCsproj.GetHashCode();
                if (this.DotnetCsprojFile != null)
                    hash = hash * 59 + this.DotnetCsprojFile.GetHashCode();
                if (this.DotnetCsprojVersionFormat != null)
                    hash = hash * 59 + this.DotnetCsprojVersionFormat.GetHashCode();
                if (this.DotnetCsprojPackageVersionFormat != null)
                    hash = hash * 59 + this.DotnetCsprojPackageVersionFormat.GetHashCode();
                if (this.MaxJobs != null)
                    hash = hash * 59 + this.MaxJobs.GetHashCode();
                if (this.BuildCloud != null)
                    hash = hash * 59 + this.BuildCloud.GetHashCode();
                if (this.OperatingSystem != null)
                    hash = hash * 59 + this.OperatingSystem.GetHashCode();
                if (this.Services != null)
                    hash = hash * 59 + this.Services.GetHashCode();
                if (this.CloneFolder != null)
                    hash = hash * 59 + this.CloneFolder.GetHashCode();
                if (this.ShallowClone != null)
                    hash = hash * 59 + this.ShallowClone.GetHashCode();
                if (this.ForceHttpsClone != null)
                    hash = hash * 59 + this.ForceHttpsClone.GetHashCode();
                if (this.CloneDepth != null)
                    hash = hash * 59 + this.CloneDepth.GetHashCode();
                if (this.EnvironmentVariables != null)
                    hash = hash * 59 + this.EnvironmentVariables.GetHashCode();
                if (this.EnvironmentVariablesMatrix != null)
                    hash = hash * 59 + this.EnvironmentVariablesMatrix.GetHashCode();
                if (this.InstallScripts != null)
                    hash = hash * 59 + this.InstallScripts.GetHashCode();
                if (this.HostsEntries != null)
                    hash = hash * 59 + this.HostsEntries.GetHashCode();
                if (this.CacheEntries != null)
                    hash = hash * 59 + this.CacheEntries.GetHashCode();
                if (this.ConfigureNuGetProjectSource != null)
                    hash = hash * 59 + this.ConfigureNuGetProjectSource.GetHashCode();
                if (this.ConfigureNuGetAccountSource != null)
                    hash = hash * 59 + this.ConfigureNuGetAccountSource.GetHashCode();
                if (this.DisableNuGetPublishOnPullRequests != null)
                    hash = hash * 59 + this.DisableNuGetPublishOnPullRequests.GetHashCode();
                if (this.BuildMode != null)
                    hash = hash * 59 + this.BuildMode.GetHashCode();
                if (this.Platform != null)
                    hash = hash * 59 + this.Platform.GetHashCode();
                if (this.Configuration != null)
                    hash = hash * 59 + this.Configuration.GetHashCode();
                if (this.MsBuildProjectFileName != null)
                    hash = hash * 59 + this.MsBuildProjectFileName.GetHashCode();
                if (this.PackageWebApplicationProjects != null)
                    hash = hash * 59 + this.PackageWebApplicationProjects.GetHashCode();
                if (this.PackageWebApplicationProjectsXCopy != null)
                    hash = hash * 59 + this.PackageWebApplicationProjectsXCopy.GetHashCode();
                if (this.PackageAzureCloudServiceProjects != null)
                    hash = hash * 59 + this.PackageAzureCloudServiceProjects.GetHashCode();
                if (this.PackageNuGetProjects != null)
                    hash = hash * 59 + this.PackageNuGetProjects.GetHashCode();
                if (this.PackageNuGetSymbols != null)
                    hash = hash * 59 + this.PackageNuGetSymbols.GetHashCode();
                if (this.IncludeNuGetReferences != null)
                    hash = hash * 59 + this.IncludeNuGetReferences.GetHashCode();
                if (this.MsBuildInParallel != null)
                    hash = hash * 59 + this.MsBuildInParallel.GetHashCode();
                if (this.MsBuildVerbosity != null)
                    hash = hash * 59 + this.MsBuildVerbosity.GetHashCode();
                if (this.BuildScripts != null)
                    hash = hash * 59 + this.BuildScripts.GetHashCode();
                if (this.BeforeBuildScripts != null)
                    hash = hash * 59 + this.BeforeBuildScripts.GetHashCode();
                if (this.BeforePackageScripts != null)
                    hash = hash * 59 + this.BeforePackageScripts.GetHashCode();
                if (this.AfterBuildScripts != null)
                    hash = hash * 59 + this.AfterBuildScripts.GetHashCode();
                if (this.TestMode != null)
                    hash = hash * 59 + this.TestMode.GetHashCode();
                if (this.TestAssemblies != null)
                    hash = hash * 59 + this.TestAssemblies.GetHashCode();
                if (this.TestCategoriesMode != null)
                    hash = hash * 59 + this.TestCategoriesMode.GetHashCode();
                if (this.TestCategories != null)
                    hash = hash * 59 + this.TestCategories.GetHashCode();
                if (this.TestCategoriesMatrix != null)
                    hash = hash * 59 + this.TestCategoriesMatrix.GetHashCode();
                if (this.TestScripts != null)
                    hash = hash * 59 + this.TestScripts.GetHashCode();
                if (this.BeforeTestScripts != null)
                    hash = hash * 59 + this.BeforeTestScripts.GetHashCode();
                if (this.AfterTestScripts != null)
                    hash = hash * 59 + this.AfterTestScripts.GetHashCode();
                if (this.DeployMode != null)
                    hash = hash * 59 + this.DeployMode.GetHashCode();
                if (this.Deployments != null)
                    hash = hash * 59 + this.Deployments.GetHashCode();
                if (this.DeployScripts != null)
                    hash = hash * 59 + this.DeployScripts.GetHashCode();
                if (this.BeforeDeployScripts != null)
                    hash = hash * 59 + this.BeforeDeployScripts.GetHashCode();
                if (this.AfterDeployScripts != null)
                    hash = hash * 59 + this.AfterDeployScripts.GetHashCode();
                if (this.XamarinRegisterAndroidProduct != null)
                    hash = hash * 59 + this.XamarinRegisterAndroidProduct.GetHashCode();
                if (this.XamarinRegisterIosProduct != null)
                    hash = hash * 59 + this.XamarinRegisterIosProduct.GetHashCode();
                if (this.MatrixFastFinish != null)
                    hash = hash * 59 + this.MatrixFastFinish.GetHashCode();
                if (this.MatrixAllowFailures != null)
                    hash = hash * 59 + this.MatrixAllowFailures.GetHashCode();
                if (this.MatrixExclude != null)
                    hash = hash * 59 + this.MatrixExclude.GetHashCode();
                if (this.Artifacts != null)
                    hash = hash * 59 + this.Artifacts.GetHashCode();
                if (this.Notifications != null)
                    hash = hash * 59 + this.Notifications.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaxJobs (int?) minimum
            if(this.MaxJobs < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxJobs, must be a value greater than or equal to 1.", new [] { "MaxJobs" });
            }

            // CloneDepth (int?) minimum
            if(this.CloneDepth < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CloneDepth, must be a value greater than or equal to 1.", new [] { "CloneDepth" });
            }

            yield break;
        }
    }

}
