/* 
 * AppVeyor REST API
 *
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * OpenAPI spec version: 0.20170106.0
 * Contact: team@appveyor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Itofinity.Appveyor.Rest.Refit.Api;
using Itofinity.Appveyor.Rest.Refit.Model;
using Itofinity.Appveyor.Rest.Refit.Client;
using System.Reflection;

namespace Itofinity.Appveyor.Rest.Refit.Test
{
    /// <summary>
    ///  Class for testing NotificationSettings
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class NotificationSettingsTests
    {
        // TODO uncomment below to declare an instance variable for NotificationSettings
        //private NotificationSettings instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of NotificationSettings
            //instance = new NotificationSettings();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of NotificationSettings
        /// </summary>
        [Test]
        public void NotificationSettingsInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" NotificationSettings
            //Assert.IsInstanceOfType<NotificationSettings> (instance, "variable 'instance' is a NotificationSettings");
        }

        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Test]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }
        /// <summary>
        /// Test the property 'OnBuildSuccess'
        /// </summary>
        [Test]
        public void OnBuildSuccessTest()
        {
            // TODO unit test for the property 'OnBuildSuccess'
        }
        /// <summary>
        /// Test the property 'OnBuildFailure'
        /// </summary>
        [Test]
        public void OnBuildFailureTest()
        {
            // TODO unit test for the property 'OnBuildFailure'
        }
        /// <summary>
        /// Test the property 'OnBuildStatusChanged'
        /// </summary>
        [Test]
        public void OnBuildStatusChangedTest()
        {
            // TODO unit test for the property 'OnBuildStatusChanged'
        }
        /// <summary>
        /// Test the property 'Account'
        /// </summary>
        [Test]
        public void AccountTest()
        {
            // TODO unit test for the property 'Account'
        }
        /// <summary>
        /// Test the property 'AuthToken'
        /// </summary>
        [Test]
        public void AuthTokenTest()
        {
            // TODO unit test for the property 'AuthToken'
        }
        /// <summary>
        /// Test the property 'Room'
        /// </summary>
        [Test]
        public void RoomTest()
        {
            // TODO unit test for the property 'Room'
        }
        /// <summary>
        /// Test the property 'Template'
        /// </summary>
        [Test]
        public void TemplateTest()
        {
            // TODO unit test for the property 'Template'
        }
        /// <summary>
        /// Test the property 'SubjectTemplate'
        /// </summary>
        [Test]
        public void SubjectTemplateTest()
        {
            // TODO unit test for the property 'SubjectTemplate'
        }
        /// <summary>
        /// Test the property 'BodyTemplate'
        /// </summary>
        [Test]
        public void BodyTemplateTest()
        {
            // TODO unit test for the property 'BodyTemplate'
        }
        /// <summary>
        /// Test the property 'Recipients'
        /// </summary>
        [Test]
        public void RecipientsTest()
        {
            // TODO unit test for the property 'Recipients'
        }
        /// <summary>
        /// Test the property 'RecipientsValue'
        /// </summary>
        [Test]
        public void RecipientsValueTest()
        {
            // TODO unit test for the property 'RecipientsValue'
        }
        /// <summary>
        /// Test the property 'From'
        /// </summary>
        [Test]
        public void FromTest()
        {
            // TODO unit test for the property 'From'
        }
        /// <summary>
        /// Test the property 'ServerUrl'
        /// </summary>
        [Test]
        public void ServerUrlTest()
        {
            // TODO unit test for the property 'ServerUrl'
        }
        /// <summary>
        /// Test the property 'IncomingWebhookUrl'
        /// </summary>
        [Test]
        public void IncomingWebhookUrlTest()
        {
            // TODO unit test for the property 'IncomingWebhookUrl'
        }
        /// <summary>
        /// Test the property 'Channel'
        /// </summary>
        [Test]
        public void ChannelTest()
        {
            // TODO unit test for the property 'Channel'
        }
        /// <summary>
        /// Test the property 'Method'
        /// </summary>
        [Test]
        public void MethodTest()
        {
            // TODO unit test for the property 'Method'
        }
        /// <summary>
        /// Test the property 'Url'
        /// </summary>
        [Test]
        public void UrlTest()
        {
            // TODO unit test for the property 'Url'
        }
        /// <summary>
        /// Test the property 'Headers'
        /// </summary>
        [Test]
        public void HeadersTest()
        {
            // TODO unit test for the property 'Headers'
        }
        /// <summary>
        /// Test the property 'HeadersValue'
        /// </summary>
        [Test]
        public void HeadersValueTest()
        {
            // TODO unit test for the property 'HeadersValue'
        }
        /// <summary>
        /// Test the property 'AddCustomRequestBody'
        /// </summary>
        [Test]
        public void AddCustomRequestBodyTest()
        {
            // TODO unit test for the property 'AddCustomRequestBody'
        }
        /// <summary>
        /// Test the property 'CustomRequestBodyContentType'
        /// </summary>
        [Test]
        public void CustomRequestBodyContentTypeTest()
        {
            // TODO unit test for the property 'CustomRequestBodyContentType'
        }
        /// <summary>
        /// Test the property 'CustomRequestBody'
        /// </summary>
        [Test]
        public void CustomRequestBodyTest()
        {
            // TODO unit test for the property 'CustomRequestBody'
        }
        /// <summary>
        /// Test the property 'VsoAccount'
        /// </summary>
        [Test]
        public void VsoAccountTest()
        {
            // TODO unit test for the property 'VsoAccount'
        }
        /// <summary>
        /// Test the property 'Username'
        /// </summary>
        [Test]
        public void UsernameTest()
        {
            // TODO unit test for the property 'Username'
        }
        /// <summary>
        /// Test the property 'Password'
        /// </summary>
        [Test]
        public void PasswordTest()
        {
            // TODO unit test for the property 'Password'
        }

    }

}
