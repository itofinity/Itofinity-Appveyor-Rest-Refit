/* 
 * AppVeyor REST API
 *
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * OpenAPI spec version: 0.20170106.0
 * Contact: team@appveyor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;
using Refit;

using Itofinity.Appveyor.Rest.Refit.Client;
using Itofinity.Appveyor.Rest.Refit.Api;
using Itofinity.Appveyor.Rest.Refit.Model;

namespace Itofinity.Appveyor.Rest.Refit.Test
{
    /// <summary>
    ///  Class for testing ProjectApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProjectApiTests
    {
        private string hostUrl = "";
        private string userAgent = "Itofinity.Appveyor.Rest.Refit.Test.ProjectApiTests";

        private IProjectApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = RestService.For<IProjectApi>(hostUrl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProjectApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProjectApi
            //Assert.IsInstanceOfType(typeof(ProjectApi), instance, "instance is a ProjectApi");
        }

        
        /// <summary>
        /// Test AddProject
        /// </summary>
        [Test]
        public async void AddProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProjectAddition body = null;
            //var response = await instance.AddProject(userAgent, body);
            //Assert.IsInstanceOf<Project> (response, "response is Project");
        }
        
        /// <summary>
        /// Test DeleteProject
        /// </summary>
        [Test]
        public async void DeleteProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string projectSlug = null;
            //instance.DeleteProject(userAgent, accountName, projectSlug);
            
        }
        
        /// <summary>
        /// Test DeleteProjectBuildCache
        /// </summary>
        [Test]
        public async void DeleteProjectBuildCacheTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string projectSlug = null;
            //instance.DeleteProjectBuildCache(userAgent, accountName, projectSlug);
            
        }
        
        /// <summary>
        /// Test EncryptValue
        /// </summary>
        [Test]
        public async void EncryptValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EncryptRequest body = null;
            //var response = await instance.EncryptValue(userAgent, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetProjectBranchStatusBadge
        /// </summary>
        [Test]
        public async void GetProjectBranchStatusBadgeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string statusBadgeId = null;
            //string buildBranch = null;
            //bool? svg = null;
            //bool? retina = null;
            //string passingText = null;
            //string failingText = null;
            //string pendingText = null;
            //var response = await instance.GetProjectBranchStatusBadge(userAgent, statusBadgeId, buildBranch, svg, retina, passingText, failingText, pendingText);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetProjectBuildByVersion
        /// </summary>
        [Test]
        public async void GetProjectBuildByVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string projectSlug = null;
            //string buildVersion = null;
            //var response = await instance.GetProjectBuildByVersion(userAgent, accountName, projectSlug, buildVersion);
            //Assert.IsInstanceOf<ProjectBuildResults> (response, "response is ProjectBuildResults");
        }
        
        /// <summary>
        /// Test GetProjectDeployments
        /// </summary>
        [Test]
        public async void GetProjectDeploymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string projectSlug = null;
            //var response = await instance.GetProjectDeployments(userAgent, accountName, projectSlug);
            //Assert.IsInstanceOf<ProjectDeploymentsResults> (response, "response is ProjectDeploymentsResults");
        }
        
        /// <summary>
        /// Test GetProjectHistory
        /// </summary>
        [Test]
        public async void GetProjectHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string projectSlug = null;
            //int? recordsNumber = null;
            //int? startBuildId = null;
            //string branch = null;
            //var response = await instance.GetProjectHistory(userAgent, accountName, projectSlug, recordsNumber, startBuildId, branch);
            //Assert.IsInstanceOf<ProjectHistory> (response, "response is ProjectHistory");
        }
        
        /// <summary>
        /// Test GetProjectLastBuild
        /// </summary>
        [Test]
        public async void GetProjectLastBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string projectSlug = null;
            //var response = await instance.GetProjectLastBuild(userAgent, accountName, projectSlug);
            //Assert.IsInstanceOf<ProjectBuildResults> (response, "response is ProjectBuildResults");
        }
        
        /// <summary>
        /// Test GetProjectLastBuildBranch
        /// </summary>
        [Test]
        public async void GetProjectLastBuildBranchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string projectSlug = null;
            //string buildBranch = null;
            //var response = await instance.GetProjectLastBuildBranch(userAgent, accountName, projectSlug, buildBranch);
            //Assert.IsInstanceOf<ProjectBuildResults> (response, "response is ProjectBuildResults");
        }
        
        /// <summary>
        /// Test GetProjectSettings
        /// </summary>
        [Test]
        public async void GetProjectSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string projectSlug = null;
            //var response = await instance.GetProjectSettings(userAgent, accountName, projectSlug);
            //Assert.IsInstanceOf<ProjectSettingsResults> (response, "response is ProjectSettingsResults");
        }
        
        /// <summary>
        /// Test GetProjectSettingsYaml
        /// </summary>
        [Test]
        public async void GetProjectSettingsYamlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string projectSlug = null;
            //var response = await instance.GetProjectSettingsYaml(userAgent, accountName, projectSlug);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetProjectStatusBadge
        /// </summary>
        [Test]
        public async void GetProjectStatusBadgeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string statusBadgeId = null;
            //bool? svg = null;
            //bool? retina = null;
            //string passingText = null;
            //string failingText = null;
            //string pendingText = null;
            //var response = await instance.GetProjectStatusBadge(userAgent, statusBadgeId, svg, retina, passingText, failingText, pendingText);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetProjects
        /// </summary>
        [Test]
        public async void GetProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = await instance.GetProjects(userAgent);
            //Assert.IsInstanceOf<List<Project>> (response, "response is List<Project>");
        }
        
        /// <summary>
        /// Test GetPublicProjectStatusBadge
        /// </summary>
        [Test]
        public async void GetPublicProjectStatusBadgeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string badgeRepoProvider = null;
            //string repoAccountName = null;
            //string repoSlug = null;
            //string branch = null;
            //bool? svg = null;
            //bool? retina = null;
            //string passingText = null;
            //string failingText = null;
            //string pendingText = null;
            //var response = await instance.GetPublicProjectStatusBadge(userAgent, badgeRepoProvider, repoAccountName, repoSlug, branch, svg, retina, passingText, failingText, pendingText);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test UpdateProject
        /// </summary>
        [Test]
        public async void UpdateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProjectWithConfiguration body = null;
            //instance.UpdateProject(userAgent, body);
            
        }
        
        /// <summary>
        /// Test UpdateProjectBuildNumber
        /// </summary>
        [Test]
        public async void UpdateProjectBuildNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string projectSlug = null;
            //ProjectBuildNumberUpdate body = null;
            //instance.UpdateProjectBuildNumber(userAgent, accountName, projectSlug, body);
            
        }
        
        /// <summary>
        /// Test UpdateProjectSettingsYaml
        /// </summary>
        [Test]
        public async void UpdateProjectSettingsYamlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountName = null;
            //string projectSlug = null;
            //byte[] body = null;
            //instance.UpdateProjectSettingsYaml(userAgent, accountName, projectSlug, body);
            
        }
        
    }

}
